
QUITE= @
ifeq ("$(origin V)", "command line")
	QUITE=
endif

DEBUG := 1		# enable for debug

TARGET := myproto
OBJDIR := obj

ifneq ("$(wildcard VERSION)","")
    VERSION_STRING := $(shell ./VERSION)
else
    VERSION_STRING := $(shell git describe --tags --always)
endif

DATE_STRING := $(shell date +%Y.%m.%d.%H:%M:%S)

# same path of THIS Makefile
#SRCDIR := $(dir $(realpath $(firstword $(MAKEFILE_LIST))))
SRCDIR := .

#include $(SRCDIR)/dpdk.mk
#include $(SRCDIR)/config.mk

#INCDIRS += -I $(SRCDIR)/../include
#INCDIRS += -I $(SRCDIR)/netshield/include
INCDIRS += -I. -I ../protobuf-c/

# for dpvs main program.
#CFLAGS += -D __DPVS__ -DDPVS_VERSION=\"$(VERSION_STRING)\" -DDPVS_BUILD_DATE=\"$(DATE_STRING)\"

#CFLAGS += -Wall -Werror -Wstrict-prototypes -Wmissing-prototypes -mcmodel=medium
CFLAGS += -Werror -Wstrict-prototypes  -mcmodel=medium

GCC_MAJOR = $(shell echo __GNUC__ | $(CC) -E -x c - | tail -n 1)
GCC_MINOR = $(shell echo __GNUC_MINOR__ | $(CC) -E -x c - | tail -n 1)
GCC_VERSION = $(GCC_MAJOR)$(GCC_MINOR)
ifeq ($(shell test $(GCC_VERSION) -ge 70 && echo 1), 1)
	CFLAGS += -Wno-format-truncation
	CFLAGS += -Wno-stringop-truncation
	CFLAGS += -Wstringop-overflow=0
endif

ifeq ($(DEBUG),)
	CFLAGS += -O3
else
	CFLAGS += -g -O0 -D DEBUG
endif

#LIBS += -lpthread -lnuma
LIBS += -lprotobuf -lprotobuf-c
#LIBS += -init -fini
CFLAGS += $(INCDIRS)

PROTO_FILES  = $(shell find $(SRCDIR) -name '*.proto' | sort)
#PROTO_C_SRCS :=  ${PROTO_FILES:$(SRCDIR)/%.proto=$(SRCDIR)/%.pb-c.c}
#PROTO_C_HDRS :=  ${PROTO_FILES:$(SRCDIR)/%.proto=$(SRCDIR)/%.pb-c.h}
PROTO_C_SRCS :=  ${PROTO_FILES:$(SRCDIR)/%.proto=$(SRCDIR)/%_pbc.c}
PROTO_C_HDRS :=  ${PROTO_FILES:$(SRCDIR)/%.proto=$(SRCDIR)/%_pbc.h}

SRCS    = $(shell find $(SRCDIR) -name '*.c' | sort)
SRCS 	+= $(PROTO_C_SRCS)
SRCDIRS = $(shell find $(SRCDIR) -name '*.c' -printf '%h\0' | sort -zu | tr '\0' '\n')
OBJS    = $(patsubst $(SRCDIR)/%.c,$(OBJDIR)/%.o,$(SRCS))
DEPS    = $(OBJS:%.o=%.d)


#########################

all:clean  buildrepo $(PROTO_C_SRCS) desclist $(TARGET)
	./$(TARGET)

$(TARGET): $(OBJS)
	$(QUITE)echo "  $(notdir $@)"
	$(QUITE)$(CC) $(CFLAGS) -o $@ $^ $(LIBS)

buildrepo: 
	@$(call make-repo)

# Create obj directory structure
define make-repo
	mkdir -p $(OBJDIR)
	for dir in $(SRCDIRS); \
	do \
		mkdir -p $(OBJDIR)/$$dir; \
	done
endef

$(OBJDIR)/%.o: %.c 
	$(QUITE)$(CC) $(CFLAGS) -MM -MT $@ -MF $(patsubst %.o,%.d,$@) $<
	$(QUITE)$(CC) -DMY_DBG_NAME=$(basename $(notdir $<)) -c $(CFLAGS) $< -o $@
#	$(QUITE)echo "  $(notdir $@)"
	$(QUITE)echo "  $@"

#%.pb-c.c: %.proto
%_pbc.c: %.proto
	@echo "PROTO file:" $<
	protoc-c --desc_out=. --c_out=. $<

clean:
	rm -rf $(OBJDIR)
	rm -f ./$(TARGET)
	rm -f $(PROTO_C_SRCS)
	rm -f $(PROTO_C_HDRS)
	rm -f *.desc *.inc
	rm -f desclist.c

install:
#	install -m 744 $(TARGET) $(INSDIR)

custom:
	cd ..;ctags -R

FMT_SRC=ns_cmds.c  ns_main.c   netlink.c debug_ctl.c

format:
	uncrustify --no-backup --mtime -c ./formatter.cfg $(FMT_SRC)



# SUB_DIR에 있는 모든 desc,inc 파일을 포함 한다.
#_desc_files = $(wildcard $1/*.desc)
#_inc_files  = $(wildcard $1/*.inc)
#_mk_files   = $(wildcard $1/Makefile)
#DESC_FILES = $(foreach _dir,$(SUB_DIR), $(call _desc_files, $(_dir)))
#INC_FILES  = $(foreach _dir,$(SUB_DIR), $(call _inc_files, $(_dir)))
#MK_FILES   = $(foreach _dir,$(SUB_DIR), $(call _mk_files, $(_dir)))

DESC_FILES   = $(shell find $(SRCDIR) -name '*.desc' | sort)
INC_FILES    = $(shell find $(SRCDIR) -name '*.inc' | sort)


desclist: 
	@$(MAKE)  desclist.c

desclist.c: $(DESC_FILES) $(INC_FILES) $(MK_FILES) $(DEF_MAKEFILE)
	@echo "Make Descriptor Lists..."
	@echo "/* Generated by the protocol buffer compiler.  DO NOT EDIT! */" > $@; 
	@echo >> $@; 
	@echo "#include <stdlib.h>" >> $@;
	@echo "#include <ulist.h>" >> $@;
	@for i in $(INC_FILES); \
	do \
		cat $$i >> $@; \
	done; 
	@echo "#include <desclist.h>" >> $@;
	@echo >> $@;
	@echo "desc_list_t g_desclist[] = {" >> $@;
	@for i in $(DESC_FILES); \
	do \
		cat $$i >> $@; \
	done; 
	@echo >> $@;
	@echo "	{ NULL, NULL }" >> $@;
	@echo "};" >> $@;
	@echo >> $@;




-include $(DEPS)
